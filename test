<template>
    <nav :class="['navbar navbar-expand-lg']">
        <div class="container-fluid">
            <NuxtLink class="navbar-brand" to="/">Accueil</NuxtLink>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse"
                data-bs-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false"
                aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarSupportedContent">
                <ul class="navbar-nav me-auto mb-2 mb-lg-0">
                    <li class="nav-item">
                        <NuxtLink class="nav-link" to="/dataset">Jeu de données</NuxtLink>
                    </li>
                    <li class="nav-item dropdown">
                        <a class="nav-link dropdown-toggle" href="#" role="button" data-bs-toggle="dropdown">
                            Suivi de production
                        </a>
                        <ul class="dropdown-menu">
                            <li>
                                <NuxtLink class="dropdown-item"
                                    :to="{ name: 'suiviexploit-env', params: { env: 'tipi' } }">
                                    Tipi
                                </NuxtLink>
                            </li>
                            <li>
                                <NuxtLink class="dropdown-item"
                                    :to="{ name: 'suiviexploit-env', params: { env: 'tipi-client' } }">Tipi Client
                                </NuxtLink>
                            </li>
                            <li>
                                <NuxtLink class="dropdown-item"
                                    :to="{ name: 'suiviexploit-env', params: { env: 'payfip' } }">Payfip
                                </NuxtLink>
                            </li>
                        </ul>
                    </li>
                    <li class="nav-item dropdown">
                        <a class="nav-link dropdown-toggle" href="#" role="button" data-bs-toggle="dropdown">
                            Paiement
                        </a>
                        <ul class="dropdown-menu">
                            <li>
                                <NuxtLink class="dropdown-item"
                                    :to="{ name: 'paiement-env', params: { env: 'tipi' } }">Tipi
                                </NuxtLink>
                            </li>
                            <li>
                                <NuxtLink class="dropdown-item"
                                    :to="{ name: 'paiement-env', params: { env: 'tipi-client' } }">Tipi Client
                                </NuxtLink>
                            </li>
                        </ul>
                    </li>
                    <li class="nav-item dropdown">
                        <a class="nav-link dropdown-toggle" href="#" role="button" data-bs-toggle="dropdown">
                            Les fichiers
                        </a>
                        <ul class="dropdown-menu">
                            <li>
                                <NuxtLink class="dropdown-item" to="/download">Télécharger</NuxtLink>
                            </li>
                            <li>
                                <NuxtLink class="dropdown-item" to="/upload">Déposer</NuxtLink>
                            </li>
                        </ul>
                    </li>
                </ul>
                <li class="navbar-nav nav-item mx-3 ">
                    <i id="iconTheme" class="bi" :class="[isDarkMode ? 'bi-sun-fill' : 'bi-moon-fill']"
                        @click="toggleDarkMode"></i>
                </li>
            </div>
        </div>
    </nav>
</template>

<script setup lang="ts">
import { defineProps, defineEmits } from 'vue';

const props = defineProps({
    isDarkMode: Boolean
});

const emits = defineEmits(['toggleDarkMode']);

const toggleDarkMode = () => {
    emits('toggleDarkMode');
};
</script>

<style lang="scss" scoped>
nav {
    height: 60px;
}

.nav-item {
    cursor: pointer;
}
</style>

paiement

<template>
  <!-- ... votre code existant ... -->
</template>

<script setup>
import { ref, onMounted, watch } from 'vue';
import { useRouter, useRoute } from 'vue-router';

const config = useRuntimeConfig();

const typePaiement = ref('soap');
const title = ref();
const env = ref();
const error = ref();

const route = useRoute();

watch(() => route.params.env, (newEnv) => {
    env.value = newEnv;
    onChangeInfo();
}, { immediate: true });

function onChangeInfo() {
  if (typePaiement.value === 'soap') {
    title.value = " Création d'un paiement par web service";
  } else if (typePaiement.value === 'url') {
    title.value = "Création d'un paiement par URL";
  } else {
    title.value = "Redirection pour paiement par portail";
  }
}

onMounted(() => {
  const bubbles = document.querySelectorAll('.bubble');
  bubbles.forEach(bubble => {
    bubble.style.setProperty('--random-left', Math.random());
  });
});

async function paiement() {
  const ip = config.public.paiement.ip[env.value];
  if (typePaiement.value === 'portail') {
    window.open(`http://${ip}/tpi-zu/accueilportail.web`, '_blank');
    return;
  }

  const formData = new FormData(document.getElementById('info'));

  if (typePaiement.value === 'soap') {
    const data = {};
    formData.forEach((value, key) => {
      data[key] = value;
    });
    const { data: result } = await useFetch(`/api/example/soap/${env.value}`, { query: data });
    if (result.value.status === 'ok') {
      window.open(result.value.data.url, '_blank');
    } else {
      const rError = result.value.data.error;
      const key = Object.keys(result.value.data.error)[0];
      error.value = {
        type: key,
        code: rError[key].code ?? '',
        descriptif: rError[key].descriptif ?? '',
        libelle: rError[key].libelle ?? '',
        severite: rError[key].severite ?? ''
      };
    }
  } else {
    const query = new URLSearchParams();
    formData.forEach((value, key) => {
      query.set(key, value);
    });
    window.open(`http://${ip}/tpi-zu/paiement.web?${query.toString()}`, '_blank');
  }
}
</script>

<style scoped>
/* ... votre style existant ... */
</style>