Cas d’utilisation : Mot de passe oublié

Description générale

Le cas d’utilisation “Mot de passe oublié” permet à un utilisateur qui a perdu ou oublié son mot de passe de réinitialiser ce dernier de manière sécurisée. Cela implique des étapes à la fois côté Front-end et Back-end, incluant des validations, des envois de courriel sécurisés, et la mise à jour du mot de passe.

Cas d’utilisation complet et complexe

Acteurs

	•	Utilisateur : Personne qui a oublié son mot de passe et souhaite le réinitialiser.
	•	Système : L’application gérant la réinitialisation du mot de passe.
	•	Serveur SMTP (ou service tiers) : Service pour l’envoi des e-mails de réinitialisation.

Préconditions

	•	L’utilisateur doit avoir un compte dans le système.
	•	Une adresse e-mail valide doit être associée au compte de l’utilisateur.

Postconditions

	•	Si toutes les étapes réussissent, l’utilisateur peut se connecter avec son nouveau mot de passe.
	•	Les anciens jetons ou sessions doivent être invalidés pour renforcer la sécurité.

Scénario principal (Front-end et Back-end)

	1.	Accès à la page de réinitialisation :
	•	L’utilisateur clique sur le lien “Mot de passe oublié” depuis la page de connexion.
	•	Route front-end : GET /password-reset affiche un formulaire pour entrer l’adresse e-mail.
	2.	Soumission de l’adresse e-mail :
	•	L’utilisateur saisit son adresse e-mail et clique sur “Envoyer”.
	•	Le front-end effectue une validation basique sur l’adresse (format correct, champ non vide).
	•	Route API : POST /api/auth/password-reset-request avec { email: "user@example.com" }.
	3.	Vérification de l’adresse e-mail (Back-end) :
	•	Le back-end vérifie si l’adresse e-mail existe dans la base de données.
	•	Si l’adresse est valide :
	•	Génère un jeton sécurisé (UUID ou JWT) avec une expiration (ex. 15 minutes).
	•	Stocke ce jeton (et son hash pour sécurité) dans la base de données lié à l’utilisateur.
	•	Envoie un e-mail contenant un lien de réinitialisation avec ce jeton.
	•	Si l’adresse est invalide : renvoie un message générique (“Si cet e-mail existe, un lien a été envoyé”).
	•	Route API : POST /api/auth/password-reset-request renvoie { success: true }.
	4.	Envoi du lien de réinitialisation :
	•	Le back-end utilise un serveur SMTP ou un service d’envoi d’e-mails (ex. SendGrid, AWS SES) pour envoyer un e-mail contenant le lien de réinitialisation.
	•	Le lien ressemble à : https://example.com/password-reset?token=securetoken123.
	5.	Clique sur le lien de réinitialisation (Front-end) :
	•	L’utilisateur reçoit l’e-mail, clique sur le lien, et est redirigé vers une page pour définir un nouveau mot de passe.
	•	Route front-end : GET /password-reset?token=securetoken123 charge un formulaire pour saisir un nouveau mot de passe.
	6.	Soumission du nouveau mot de passe :
	•	L’utilisateur entre son nouveau mot de passe et le confirme.
	•	Le front-end valide :
	•	Les deux champs doivent correspondre.
	•	Le mot de passe doit respecter les critères de sécurité (longueur, caractères spéciaux, etc.).
	•	Route API : POST /api/auth/password-reset avec { token: "securetoken123", password: "NewStrongPassword123" }.
	7.	Validation et mise à jour du mot de passe (Back-end) :
	•	Le serveur :
	•	Vérifie la validité du jeton (existence, non expiré).
	•	Vérifie que le jeton correspond à l’utilisateur.
	•	Hache le nouveau mot de passe (ex. bcrypt).
	•	Met à jour le mot de passe dans la base de données.
	•	Invalide le jeton utilisé (le supprime ou le marque comme expiré).
	•	Route API : POST /api/auth/password-reset renvoie { success: true }.
	8.	Confirmation de la réinitialisation :
	•	Le back-end renvoie un succès, et l’utilisateur est redirigé vers la page de connexion avec un message de confirmation.
	•	Le front-end affiche un message : “Votre mot de passe a été réinitialisé avec succès. Veuillez vous connecter.”

Scénarios alternatifs (Erreurs)

	1.	Adresse e-mail invalide lors de la demande :
	•	Si l’adresse e-mail n’existe pas en base de données, le serveur ne révèle pas cette information.
	•	Réponse API : { success: true } pour éviter les fuites d’informations.
	2.	Jeton expiré ou invalide :
	•	Si le jeton est expiré ou invalide lors de la soumission du nouveau mot de passe :
	•	Réponse API : { success: false, error: "Invalid or expired token" }.
	•	Le front-end invite l’utilisateur à recommencer le processus.
	3.	Erreur d’envoi de l’e-mail :
	•	Si l’e-mail ne peut pas être envoyé (problème SMTP), le serveur renvoie une erreur.
	•	Réponse API : { success: false, error: "Unable to send email. Please try again later." }.
	4.	Mot de passe non conforme :
	•	Si le mot de passe ne respecte pas les critères de sécurité (longueur, complexité) :
	•	Réponse API : { success: false, error: "Password does not meet security requirements." }.
	•	Le front-end affiche un message expliquant les critères.

Routes API détaillées

1. Demander un lien de réinitialisation

	•	Route : POST /api/auth/password-reset-request
	•	Entrée : { email: "user@example.com" }
	•	Sortie (Succès) : { success: true }
	•	Sortie (Erreur) : { success: false, error: "Internal server error" }

2. Soumettre le nouveau mot de passe

	•	Route : POST /api/auth/password-reset
	•	Entrée : { token: "securetoken123", password: "NewStrongPassword123" }
	•	Sortie (Succès) : { success: true }
	•	Sortie (Erreur) : { success: false, error: "Invalid or expired token" }

Sécurité et meilleures pratiques

	1.	Jeton sécurisé :
	•	Utiliser un jeton unique (UUID ou JWT avec signature) qui expire rapidement.
	•	Stocker un hash du jeton en base de données, jamais le jeton brut.
	2.	Hachage des mots de passe :
	•	Utiliser un algorithme comme bcrypt ou Argon2 pour hacher les mots de passe.
	3.	Limiter les tentatives :
	•	Implémenter un système de throttling pour limiter les requêtes abusives (ex. max 5 tentatives par heure).
	4.	Ne pas divulguer les erreurs :
	•	Toujours répondre de manière générique pour éviter de révéler si une adresse e-mail est enregistrée.
	5.	HTTPS obligatoire :
	•	Les liens de réinitialisation doivent être servis exclusivement via HTTPS.

Avec ces étapes, le processus est sécurisé, robuste, et minimise les risques d’abus ou de failles de sécurité. N’hésitez pas à demander une visualisation UML ou plus de détails sur une étape spécifique !