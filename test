<template>
  <div class="bgg">
    <h1 class="text-center">Téléchargement de fichiers</h1>
    <div class="shadow-lg rounded-3 p-4 my-3 mx-auto w-75">
      <h4 class="d-flex justify-content-center">Filtre de recherche <i class="bi bi-search ms-2"></i></h4>
      <div class="row justify-content-center">
        <div class="col-2">
          <label for="dateFrom" class="form-label mb-2 white">Date de début :</label>
          <input type="date" class="form-control" id="dateFrom" v-model="dateFrom" @change="applyDateFilter" />
        </div>
        <div class="col-2">
          <label for="dateTo" class="form-label mb-2 white">Date de fin :</label>
          <input type="date" class="form-control" id="dateTo" v-model="dateTo" @change="applyDateFilter" />
        </div>
        <div class="col-2">
          <label class="form-label mb-2 white">Nom du fichier :</label>
          <input type="text" id="customSearch" class="form-control" placeholder="rechercher" />
        </div>
        <div class="col-2" id="filter">
          <label class="form-label mb-2 white">Catégorie :</label>
          <select class="form-control bootstrap-table-filter-control-category">
            <option value="">Afficher tout</option>
          </select>
        </div>
      </div>
    </div>

    <div class="w-75 m-auto">
      <div v-if="items.length > 0">
        <table id="table" data-filter-control-container="#filter" data-toggle="table" data-pagination="true"
          data-search="true" data-filter-control="true" data-click-to-select="true" data-search-highlight="true"
          data-search-selector="#customSearch">
          <thead>
            <tr>
              <th data-checkbox="true" data-field="check"></th>
              <th data-field="zone" data-sortable="true" data-searchable="false">Zone</th>
              <th data-field="nomfichier" data-sortable="true" data-searchable="true">Nom fichier</th>
              <th data-field="category" data-sortable="true" data-filter-control="select">Catégorie</th>
              <th data-field="date" data-searchable="false">Date mise en ligne</th>
            </tr>
          </thead>
        </table>
        <div class="text-center mb-4 d-flex justify-content-center">
          <button class="btn btn-secondary validerCouleur" @click="generateFile" type="button" data-dismiss="alert">
            Générer Fichiers
          </button>
        </div>
      </div>
      <div v-else class="text-center">
        <p>Aucune donnée disponible</p>
      </div>
      <div v-if="errorMessage" class="alert alert-danger" role="alert">
        {{ errorMessage }}
      </div>
    </div>
  </div>
</template>

<script setup lang="ts">
import { ref, onMounted } from 'vue';

interface Item {
  id: number;
  nomfichier: string;
  category: string;
  date: string;
  pathFull: string;
}

const items = ref<Item[]>([]);
const dateFrom = ref<string | null>(null);
const dateTo = ref<string | null>(null);
const errorMessage = ref<string | null>(null);

onMounted(async () => {
  try {
    const data: any[] = await $fetch('/api/file/tipi/download/listfile');
    if (data.length > 0) {
      items.value = data.map((el) => ({
        ...el,
        date: new Intl.DateTimeFormat('fr-FR', {
          year: 'numeric',
          month: 'numeric',
          day: 'numeric',
          hour: 'numeric',
          minute: 'numeric',
          second: 'numeric',
          timeZone: 'GMT',
        }).format(new Date(el.date)),
      }));

      // Initialiser le tableau avec les nouvelles données
      $('#table').bootstrapTable({
        data: items.value,
      });
    }
  } catch (error: any) {
    errorMessage.value = 'Erreur lors de la récupération des données. Veuillez réessayer plus tard. ' + error.message;
  }
});

const applyDateFilter = () => {
  const table = $('#table');
  table.bootstrapTable('load', items.value);
  table.bootstrapTable(
    'filterBy',
    {},
    {
      filterAlgorithm: function (row: { date: string | number | Date }, filters: any) {
        const day = row.date.toString().slice(0, 2);
        const month = row.date.toString().slice(3, 5) + '/';
        const year = row.date.toString().slice(6, 10);
        const itemDate = new Date(year + '/' + month + '/' + day);
        const fromDate = dateFrom.value ? new Date(dateFrom.value) : undefined;
        const toDate = dateTo.value ? new Date(dateTo.value) : undefined;

        if (fromDate && toDate) {
          return itemDate >= fromDate && itemDate <= toDate;
        } else if (!fromDate && toDate) {
          return itemDate <= toDate;
        } else if (fromDate && !toDate) {
          return itemDate >= fromDate;
        }

        return true;
      },
    }
  );
};

const generateFile = async () => {
  try {
    const selectedRows: any = $('#table').bootstrapTable('getSelections');
    if (selectedRows.length === 0) {
      alert('Veuillez sélectionner au moins un fichier.');
      return;
    }
    const filenames = selectedRows.map((row: any) => ({
      name: row.nomfichier,
      pathFull: row.pathFull,
    }));

    const response = await fetch('/api/file/tipi/download/download', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ filenames }),
    });

    if (!response.ok) {
      const errorData = await response.json();
      throw new Error(errorData.statusMessage || 'Erreur lors du téléchargement des fichiers.');
    }

    const blob = await response.blob();
    const url = window.URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'FichiersPaiement.zip';
    document.body.appendChild(a);
    a.click();
    a.remove();
  } catch (error: any) {
    console.error('Erreur lors de la génération du fichier ZIP:', error.message);
    errorMessage.value = 'Erreur lors de la génération du fichier ZIP. ' + error.message;
  }
};
</script>