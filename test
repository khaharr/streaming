<template>
    <div class="bgg">
      <div id="loading-animation">
        <div class="loader"></div>
      </div>
      <h1 class="text-center">Téléchargement de fichiers</h1>
  
      <!-- Formulaire de sélection -->
      <div v-if="!isSelectionConfirmed" class=" p-4  mx-auto w-75 border border-white rounded-4">
        <h4 class="d-flex justify-content-center">Sélectionnez les options</h4>
        <div class="row justify-content-center">
          <div class="col-3">
            <label class="form-label mb-2 white">Type de données :</label>
            <select class="form-select" v-model="typeData">
              <option value="data">Data</option>
              <option value="log">Log</option>
            </select>
          </div>
          <div class="col-3">
            <label class="form-label mb-2 white">Type de client :</label>
            <select class="form-select" v-model="typeClient">
              <option value="tipi">Tipi</option>
              <option value="tipi_client">Tipi Client</option>
            </select>
          </div>
          <div class="col-3">
            <label class="form-label mb-2 white">Catégorie :</label>
            <select class="form-select" v-model="zone">
              <option value="za">ZA</option>
              <option value="zu">ZU</option>
            </select>
          </div>
          <div class="col-3 d-flex align-items-end">
            <button class="btn mtj" @click="confirmSelection">Valider</button>
          </div>
        </div>
      </div>
  
      <!-- Bouton pour afficher le formulaire de sélection -->
      <div v-if="isSelectionConfirmed" class="d-flex justify-content-center my-3">
        <button class="btn mtj" @click="showSelectionForm = true">Modifier la sélection</button>
      </div>
  
      <!-- Filtre de recherche et tableau -->
      <div v-if="isSelectionConfirmed" class="shadow-lg rounded-3 p-4 my-3 mx-auto w-75">
        <h4 class="d-flex justify-content-center">Filtre de recherche <i class="bi bi-search ms-2"></i></h4>
        <div class="row justify-content-center">
          <div class="col-2">
            <label for="dateFrom" class="form-label mb-2 white">Date de début :</label>
            <input type="date" class="form-control" id="dateFrom" v-model="dateFrom" @change="applyDateFilter" />
          </div>
          <div class="col-2">
            <label for="dateTo" class="form-label mb-2 white">Date de fin :</label>
            <input type="date" class="form-control" id="dateTo" v-model="dateTo" @change="applyDateFilter" />
          </div>
          <div class="col-2">
            <label class="form-label mb-2 white">Nom du fichier :</label>
            <input type="text" id="customSearch" class="form-control form-control-simple" placeholder="rechercher" />
          </div>
          <div class="col-2" id="filter">
            <label class="form-label mb-2 white">Catégorie :</label>
            <select class="form-control bootstrap-table-filter-control-category">
              <option value="">Afficher tout</option>
            </select>
          </div>
        </div>
      </div>
  
      <div v-if="isSelectionConfirmed" class="w-75 m-auto my-3">
        <table
          id="table"
          data-filter-control-container="#filter"
          data-toggle="table"
          data-pagination="true"
          data-search="true"
          data-filter-control="true"
          data-maintain-meta-data="true"
          data-click-to-select="true"
          data-search-highlight="true"
          data-search-selector="#customSearch"
        ></table>
        
        <div class="text-center mb-4 d-flex justify-content-center">
          <button class="btn mtj validerCouleur" @click="generateFile" type="button" data-dismiss="alert">
            Générer Fichiers
          </button>
        </div>
        <div v-if="errorMessage" class="alert alert-danger" role="alert">
          {{ errorMessage }}
        </div>
      </div>
  
      <!-- Popup pour le formulaire de sélection -->
      <div v-if="showSelectionForm" class="modal" tabindex="-1" role="dialog" style="display: block;">
        <div class="modal-dialog" role="document">
          <div class="modal-content">
            <div class="modal-header">
              <h5 class="modal-title">Modifier la sélection</h5>
              <button type="button" class="btn-close " @click="showSelectionForm = false" aria-label="Close">
                <!-- <span aria-hidden="true">&times;</span> -->
              </button>
            </div>
            <div class="modal-body">
              <div class="row justify-content-center">
                <div class="col-4">
                  <label class="form-label mb-2 white">Type de données :</label>
                  <select class="form-control" v-model="typeData">
                    <option value="data">Data</option>
                    <option value="log">Log</option>
                  </select>
                </div>
                <div class="col-4">
                  <label class="form-label mb-2 white">Type de client :</label>
                  <select class="form-control" v-model="typeClient">
                    <option value="tipi">Tipi</option>
                    <option value="tipi_client">Tipi Client</option>
                  </select>
                </div>
                <div class="col-4">
                  <label class="form-label mb-2 white">Catégorie :</label>
                  <select class="form-control" v-model="zone">
                    <option value="za">ZA</option>
                    <option value="zu">ZU</option>
                  </select>
                </div>
              </div>
            </div>
            <div class="modal-footer">
              <button type="button" class="btn btn-primary" @click="confirmSelection">Enregistrer</button>
              <button type="button" class="btn btn-secondary" @click="showSelectionForm = false">Fermer</button>
            </div>
          </div>
        </div>
      </div>
    </div>
  </template>
  
  <script setup lang="ts">
  
  // Interface pour les items
  interface Item {
    id: number;
    nomfichier: string;
    category: string;
    date: string;
    pathFull: string;
    zone: string;
    size: string;

  }
  
  const items = ref<Item[]>([]);
  const dateFrom = ref<string | null>(null);
  const dateTo = ref<string | null>(null);
  const errorMessage = ref<string | null>(null);
  
  const typeData = ref<'data' | 'log'>(localStorage.getItem('typeData') as 'data' | 'log' || 'data');
  const typeClient = ref<'tipi' | 'tipi_client'>(localStorage.getItem('typeClient') as 'tipi' | 'tipi_client' || 'tipi');
  const zone = ref<'zu' | 'za'>(localStorage.getItem('zone') as 'zu' | 'za' || 'za');
  
  const isSelectionConfirmed = ref(false);
  const showSelectionForm = ref(false);
  
  const columns = [
    { checkbox: true, field: 'check' },
  
    { field: 'nomfichier', sortable: true, searchable: true, title: 'Nom fichier' },
    { field: 'size', sortable: true, searchable: false, title: 'Taille' },
    { field: 'category', sortable: true, filterControl: 'select', title: 'Catégorie' },
    { field: 'date', searchable: false, title: 'Date mise en ligne' },
  ];
  
// Fonction pour afficher l'animation d'attente
function waitAnimation() {
  $("#loading-animation").show();
}


  function hideWaitAnimation() {
  $("#loading-animation").hide();
}

  const confirmSelection = () => {
    isSelectionConfirmed.value = true;
    showSelectionForm.value = false;
    localStorage.setItem('typeData', typeData.value);
    localStorage.setItem('typeClient', typeClient.value);
    localStorage.setItem('zone', zone.value);
    loadData();
  };
  
  const loadData = async () => {
    waitAnimation()
    try {
      const data: any[] = await $fetch(`/api/file/tipi/download/${typeData.value}/${zone.value}/listfile`);
      if (data.length > 0) {
        items.value = data;
        data.map((el) =>
          (el.date = new Intl.DateTimeFormat('fr-FR', {
            year: 'numeric',
            month: 'numeric',
            day: 'numeric',
            hour: 'numeric',
            minute: 'numeric',
            second: 'numeric',
            timeZone: 'GMT',
          }).format(el.date)),
        );
  
            $('#table').bootstrapTable('destroy');

            $('#table').bootstrapTable({ columns: columns, data: data });

        }
    } catch (error: any) {
        errorMessage.value = 'Erreur lors de la récupération des données. Veuillez réessayer plus tard. ' + error.message;
    }
    finally{
      hideWaitAnimation()
    }
}

const applyDateFilter = () => {
    console.log('ok', items.value)
    const table = $('#table');
    table.bootstrapTable('load', items.value);
    table.bootstrapTable(
        'filterBy',
        {},
        {
            filterAlgorithm: function (row: { date: string | number | Date; }, filters: any) {
                const day = row.date.toString().slice(0, 2)
                const month = row.date.toString().slice(3, 5) + '/'
                const year = row.date.toString().slice(6, 10)
                const itemDate = new Date(year + '/' + month + '/' + day);
                const fromDate = dateFrom.value ? new Date(dateFrom.value) : undefined;
                const toDate = dateTo.value ? new Date(dateTo.value) : undefined;


                if (fromDate && toDate) {
                    return itemDate >= fromDate && itemDate <= toDate;
                }
                else if (!fromDate && toDate) {
                    return itemDate <= toDate;
                }
                else if (fromDate && !toDate) {
                    return itemDate >= fromDate;
                }

                return true
            }
        }
    );
};

const generateFile = async () => {
  waitAnimation()
    try {
        const selectedRows: any = $('#table').bootstrapTable('getSelections');
        if (selectedRows.length === 0) {
            alert('Veuillez sélectionner au moins un fichier.');
            return;
        }
        console.log(selectedRows)
        const filenames = selectedRows.map((row: any) => {
            return { name: row.nomfichier, pathFull: row.pathFull, zone: row.zone }
        });

        const response = await fetch(`/api/file/tipi/download/${typeData.value}/download`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ filenames }),
        });

        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(errorData.statusMessage || 'Erreur lors du téléchargement des fichiers.');
        }


        const blob = await response.blob();
        const url = window.URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `Fichiers_${typeData.value}_${zone.value}.zip`;
        document.body.appendChild(a);
        a.click();
        a.remove();
        $('#table').bootstrapTable('uncheckAll');
    } catch (error: any) {
        console.error('Erreur lors de la génération du fichier ZIP:', error.message);
        errorMessage.value = 'Erreur lors de la génération du fichier ZIP. ' + error.message;
    }
    finally{
      hideWaitAnimation()
    }
};
</script>

<style lang="scss" scoped>
// .tbl-filters {
//     // margin: 20px auto;
//     // padding: 20px;
//     // background-color: #ddd0c8;
//     // width: 70vw;
//     // border-radius: 10px;
//     // box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
// }

// .form-row {
//     margin-bottom: 20px;
// }

// .form-label {
//     margin-bottom: 10px;
// }

// .form-control {
//     height: calc(1.5em + 0.75rem + 2px);
//     // padding: 0.375rem 0.75rem;
//     font-size: 0.875rem;
//     line-height: 1.5;
// }

// .table {
//     background-color: rgb(231, 231, 231);
// }

// .filter-title {
//     color: rgb(0, 0, 0);
//     animation: slide-in 0.5s ease-in-out;

//     .bi-search {
//         margin-left: 5px;
//     }
// }

// h1 {
//     //     font-size: 32px;
//     //     font-family: Arial, Helvetica, sans-serif;
//     //     color: rgb(0, 0, 0);
//     //     padding: 16px;
//     //     font-weight: lighter;
//     //     box-shadow: 2px 2px 6px #9e9e9e;
//          text-align: center;
//     //     display: block;
//     //     border-radius: 20px;
// }

// .fixer {
//     position: fixed;

// }

// .bgg {
//     background-color: #ddd0c8;
//     min-height: 93.8vh;
//     margin: 0;
//     padding: 0;
// }</style>
