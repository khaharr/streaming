donload.vue<template>
    <div class="bgg ">
        <h1 class="text-center">Téléchargement de fichiers</h1>
        <div class="shadow-lg rounded-3 p-4 my-3 mx-auto w-75 ">
            <h4 class="d-flex justify-content-center">Filtre de recherche <i class="bi bi-search ms-2"></i></h4>
            <div class="row justify-content-center">
                <div class="col-2">
                    <label for="dateFrom" class="form-label  mb-2 white">Date de début :</label>
                    <input type="date" class="form-control" id="dateFrom" v-model="dateFrom"
                        @change="applyDateFilter" />
                </div>
                <div class="col-2">
                    <label for="dateTo" class="form-label mb-2 white">Date de fin :</label>
                    <input type="date" class="form-control" id="dateTo" v-model="dateTo" @change="applyDateFilter" />
                </div>
                <div class="col-2">
                    <label class="form-label mb-2 white ">Nom du fichier :</label>
                    <input type="text" id="customSearch" class="form-control " placeholder="rechercher" />
                </div>
                <div class="col-2" id="filter">
                    <label class="form-label mb-2 white">Catégorie :</label>
                    <select class="form-control bootstrap-table-filter-control-category">
                        <option value="">Afficher tout</option>
                    </select>
                </div>
            </div>
        </div>

        <div class="w-75 m-auto">
            <table id="table" data-filter-control-container="#filter" data-toggle="table" data-pagination="true"
                data-search="true" data-filter-control="true" data-maintain-meta-data="true" data-click-to-select="true"
                data-search-highlight="true" data-search-selector="#customSearch">
                <thead>
                    <tr>
                        <th data-checkbox="true" data-field="check"></th>
                        <th data-field="zone" data-sortable="true" data-searchable="false">Zone</th>
                        <th data-field="nomfichier" data-sortable="true" data-searchable="true">Nom fichier</th>
                        <th data-field="category" data-sortable="true" data-filter-control="select">Catégorie</th>
                        <th data-field="date" data-searchable="false">Date mise en ligne</th>
                        <!-- <th data-field="pathFull" data-searchable="false">lien</th> -->
                    </tr>
                </thead>
            </table>
            <div class="text-center mb-4 d-flex justify-content-center">
                <button class="btn btn-secondary validerCouleur " @click="generateFile" type="button"
                    data-dismiss="alert">
                    Générer Fichiers
                </button>
            </div>
            <div v-if="errorMessage" class="alert alert-danger" role="alert">
                {{ errorMessage }}
            </div>
        </div>
    </div>
</template>

<script setup lang="ts">

// Interface pour les items
interface Item {
    id: number;
    nomfichier: string;
    category: string;
    date: string;
    pathFull: string;
    zone: string;
}

const items: Ref<Item[]> = ref([]);
const dateFrom: Ref<string | null> = ref(null);
const dateTo: Ref<string | null> = ref(null);
const errorMessage: Ref<string | null> = ref(null);
const typeData = ref<'data' | 'log'>('data')


onMounted(async () => {
    try {
        const data: any[] = await $fetch(`/api/file/tipi/download/${typeData.value}/listfile`);
        if (data.length > 0) {
            items.value = data
            data.map((el) => el.date = new Intl.DateTimeFormat('fr-FR', {
                year: "numeric",
                month: "numeric",
                day: "numeric",
                hour: 'numeric',
                minute: 'numeric',
                second: 'numeric',
                timeZone: 'GMT'
            }).format(el.date)

            )
            // $('#table').bootstrapTable('destroy');

            $('#table').bootstrapTable('load', data);

        }
    } catch (error: any) {
        errorMessage.value = 'Erreur lors de la récupération des données. Veuillez réessayer plus tard. ' + error.message;
    }
});

const applyDateFilter = () => {
    console.log('ok', items.value)
    const table = $('#table');
    table.bootstrapTable('load', items.value);
    table.bootstrapTable(
        'filterBy',
        {},
        {
            filterAlgorithm: function (row: { date: string | number | Date; }, filters: any) {
                const day = row.date.toString().slice(0, 2)
                const month = row.date.toString().slice(3, 5) + '/'
                const year = row.date.toString().slice(6, 10)
                const itemDate = new Date(year + '/' + month + '/' + day);
                const fromDate = dateFrom.value ? new Date(dateFrom.value) : undefined;
                const toDate = dateTo.value ? new Date(dateTo.value) : undefined;


                if (fromDate && toDate) {
                    return itemDate >= fromDate && itemDate <= toDate;
                }
                else if (!fromDate && toDate) {
                    return itemDate <= toDate;
                }
                else if (fromDate && !toDate) {
                    return itemDate >= fromDate;
                }

                return true
            }
        }
    );
};

const generateFile = async () => {
    try {
        const selectedRows: any = $('#table').bootstrapTable('getSelections');
        if (selectedRows.length === 0) {
            alert('Veuillez sélectionner au moins un fichier.');
            return;
        }
        console.log(selectedRows)
        const filenames = selectedRows.map((row: any) => {
            return { name: row.nomfichier, pathFull: row.pathFull, zone: row.zone }
        });

        const response = await fetch(`/api/file/tipi/download/${typeData.value}/download`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ filenames }),
        });

        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(errorData.statusMessage || 'Erreur lors du téléchargement des fichiers.');
        }


        const blob = await response.blob();
        const url = window.URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = 'FichiersPaiement.zip';
        document.body.appendChild(a);
        a.click();
        a.remove();
        $('#table').bootstrapTable('uncheckAll');
    } catch (error: any) {
        console.error('Erreur lors de la génération du fichier ZIP:', error.message);
        errorMessage.value = 'Erreur lors de la génération du fichier ZIP. ' + error.message;
    }
};
</script>

<style lang="scss" scoped>
// .tbl-filters {
//     // margin: 20px auto;
//     // padding: 20px;
//     // background-color: #ddd0c8;
//     // width: 70vw;
//     // border-radius: 10px;
//     // box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
// }

// .form-row {
//     margin-bottom: 20px;
// }

// .form-label {
//     margin-bottom: 10px;
// }

// .form-control {
//     height: calc(1.5em + 0.75rem + 2px);
//     // padding: 0.375rem 0.75rem;
//     font-size: 0.875rem;
//     line-height: 1.5;
// }

// .table {
//     background-color: rgb(231, 231, 231);
// }

// .filter-title {
//     color: rgb(0, 0, 0);
//     animation: slide-in 0.5s ease-in-out;

//     .bi-search {
//         margin-left: 5px;
//     }
// }

// h1 {
//     //     font-size: 32px;
//     //     font-family: Arial, Helvetica, sans-serif;
//     //     color: rgb(0, 0, 0);
//     //     padding: 16px;
//     //     font-weight: lighter;
//     //     box-shadow: 2px 2px 6px #9e9e9e;
//          text-align: center;
//     //     display: block;
//     //     border-radius: 20px;
// }

// .fixer {
//     position: fixed;

// }

// .bgg {
//     background-color: #ddd0c8;
//     min-height: 93.8vh;
//     margin: 0;
//     padding: 0;
// }</style>

listfile 

import { SFTPClient, optionsRegex } from '~/services/sftp.service';
import { fileOut } from '~/services/files'

export default defineEventHandler(async (event) => {

    const env = getRouterParam(event, 'env') as string
    const typeData = getRouterParam(event, 'type') as string
    console.log(env)
    if (!env) {
        console.error("Erreur Pas d'environnement de defini");
        throw createError({ statusCode: 500, statusMessage: "Erreur Pas d'environnement de defini" });
    }

    const sftp = new SFTPClient()
    try {
        let files: any[] = []
        for (let zone in fileOut) {
            console.log(fileOut[zone]?.server[env])
            await sftp.connect({ host: fileOut[zone]?.server[env] || '' })
            let myData
            if (typeData === 'log') {
                myData = fileOut[zone]?.log;
            }
            else {
                myData = fileOut[zone]?.data;
            }

            for (let category in myData) {

                const options: optionsRegex = {
                    type: '-',
                    name: myData[category]?.format
                }
                const values = await sftp.listFiles(myData[category]?.path || '', options)
                const value: any[] = values.map((file, index) => {

                    return {
                        nomfichier: file.name,
                        category: category,
                        pathFull: (myData[category]?.path || '') + '/' + file.name,
                        date: file.modifyTime,
                        zone: zone.toUpperCase()
                    };
                })
                files = files.concat(value)

            }
            await sftp.close()
        }
        return files
    } catch (error) {
        console.error('Erreur lors de la récupération des fichiers du répertoire', error);
        throw createError({ statusCode: 500, statusMessage: 'Erreur lors de la récupération des fichiers du répertoire' });
    } finally {
        await sftp.close()
    }
});
