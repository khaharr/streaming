<template>
    <div class="bgg">
      <div id="loading-animation">
        <div class="loader"></div>
      </div>
      <h1 class="text-center">Téléchargement de fichiers</h1>
  
      <!-- Formulaire de sélection -->
      <div v-if="!isSelectionConfirmed" class="p-4 mx-auto w-75 border border-white rounded-4">
        <h4 class="d-flex justify-content-center">Sélectionnez les options</h4>
        <div class="row justify-content-center">
          <div class="col-3">
            <label class="form-label mb-2 white">Type de données :</label>
            <select class="form-select" v-model="typeData">
              <option value="data">Data</option>
              <option value="log">Log</option>
            </select>
          </div>
          <div class="col-3">
            <label class="form-label mb-2 white">Type de client :</label>
            <select class="form-select" v-model="typeClient">
              <option value="tipi">Tipi</option>
              <option value="tipi_client">Tipi Client</option>
            </select>
          </div>
          <div class="col-3">
            <label class="form-label mb-2 white">Catégorie :</label>
            <select class="form-select" v-model="zone">
              <option value="za">ZA</option>
              <option value="zu">ZU</option>
            </select>
          </div>
          <div class="col-3 d-flex align-items-end">
            <button class="btn mtj" @click="confirmSelection">Valider</button>
          </div>
        </div>
      </div>
  
      <!-- Bouton pour afficher le formulaire de sélection -->
      <div v-if="isSelectionConfirmed" class="d-flex justify-content-center my-3">
        <button class="btn mtj" @click="showSelectionForm = true">Modifier la sélection</button>
      </div>
  
      <!-- Filtre de recherche et tableau -->
      <div v-if="isSelectionConfirmed" class="shadow-lg rounded-3 p-4 my-3 mx-auto w-75">
        <h4 class="d-flex justify-content-center">Filtre de recherche <i class="bi bi-search ms-2"></i></h4>
        <div class="row justify-content-center">
          <div class="col-2">
            <label for="dateFrom" class="form-label mb-2 white">Date de début :</label>
            <input type="date" class="form-control" id="dateFrom" v-model="dateFrom" @change="applyDateFilter" />
          </div>
          <div class="col-2">
            <label for="dateTo" class="form-label mb-2 white">Date de fin :</label>
            <input type="date" class="form-control" id="dateTo" v-model="dateTo" @change="applyDateFilter" />
          </div>
          <div class="col-2">
            <label class="form-label mb-2 white">Nom du fichier :</label>
            <input type="text" id="customSearch" class="form-control form-control-simple" placeholder="rechercher" />
          </div>
          <div class="col-2" id="filter">
            <label class="form-label mb-2 white">Catégorie :</label>
            <select class="form-control bootstrap-table-filter-control-category">
              <option value="">Afficher tout</option>
            </select>
          </div>
        </div><br>
        <div v-if="errorMessage" class="alert alert-danger" role="alert">
          {{ errorMessage }}
        </div>
      </div>
      
      <div v-if="isSelectionConfirmed" class="w-75 m-auto my-3">
        <div :class="sizeClass">Total sélectionné : {{ animatedTotalSize }} Mo</div>
        <table
          id="table"
          data-filter-control-container="#filter"
          data-toggle="table"
          data-pagination="true"
          data-search="true"
          data-filter-control="true"
          data-maintain-meta-data="true"
          data-click-to-select="true"
          data-search-highlight="true"
          data-search-selector="#customSearch"
        ></table>
        
        <div class="text-center mb-4 d-flex justify-content-center">
          <button class="btn mtj validerCouleur" @click="generateFile" type="button" data-dismiss="alert">
            Générer Fichiers
          </button>
        </div>
      </div>
  
      <!-- Popup pour le formulaire de sélection -->
      <div v-if="showSelectionForm" class="modal" tabindex="-1" role="dialog" style="display: block;">
        <div class="modal-dialog" role="document">
          <div class="modal-content">
            <div class="modal-header">
              <h5 class="modal-title">Modifier la sélection</h5>
              <button type="button" class="btn-close " @click="showSelectionForm = false" aria-label="Close">
              </button>
            </div>
            <div class="modal-body">
              <div class="row justify-content-center">
                <div class="col-4">
                  <label class="form-label mb-2 white">Type de données :</label>
                  <select class="form-control" v-model="typeData">
                    <option value="data">Data</option>
                    <option value="log">Log</option>
                  </select>
                </div>
                <div class="col-4">
                  <label class="form-label mb-2 white">Type de client :</label>
                  <select class="form-control" v-model="typeClient">
                    <option value="tipi">Tipi</option>
                    <option value="tipi_client">Tipi Client</option>
                  </select>
                </div>
                <div class="col-4">
                  <label class="form-label mb-2 white">Catégorie :</label>
                  <select class="form-control" v-model="zone">
                    <option value="za">ZA</option>
                    <option value="zu">ZU</option>
                  </select>
                </div>
              </div>
            </div>
            <div class="modal-footer">
              <button type="button" class="btn btn-primary" @click="confirmSelection">Enregistrer</button>
              <button type="button" class="btn btn-secondary" @click="showSelectionForm = false">Fermer</button>
            </div>
          </div>
        </div>
      </div>
    </div>
  </template>

script 

<script setup lang="ts">
import { ref, computed, watch } from 'vue';

// Interface pour les items
interface Item {
  id: number;
  nomfichier: string;
  category: string;
  date: string;
  pathFull: string;
  zone: string;
  size: number;
}

const items = ref<Item[]>([]);
const selectedItems = ref<Item[]>([]);
const dateFrom = ref<string | null>(null);
const dateTo = ref<string | null>(null);
const errorMessage = ref<string | null>(null);

const typeData = ref<'data' | 'log'>(localStorage.getItem('typeData') as 'data' | 'log' || 'data');
const typeClient = ref<'tipi' | 'tipi_client'>(localStorage.getItem('typeClient') as 'tipi' | 'tipi_client' || 'tipi');
const zone = ref<'zu' | 'za'>(localStorage.getItem('zone') as 'zu' | 'za' || 'za');

const isSelectionConfirmed = ref(false);
const showSelectionForm = ref(false);
const currentSize = ref(0);
const animatedTotalSize = ref("0.00");

// Calcul du total en Mo
const totalSizeInMo = computed(() => {
  const total = selectedItems.value.reduce((total, item) => total + item.size, 0);
  return total.toFixed(2);
});

// Classe CSS dynamique pour la couleur du texte
const sizeClass = computed(() => {
  const total = parseFloat(totalSizeInMo.value);
  if (total < 150) {
    return 'text-success';
  } else if (total >= 150 && total < 200) {
    return 'text-warning';
  } else {
    return 'text-danger';
  }
});

// Animation du compteur
watch(totalSizeInMo, (newValue) => {
  const target = parseFloat(newValue);
  const step = (target - currentSize.value) / 30;
  const interval = setInterval(() => {
    currentSize.value += step;
    animatedTotalSize.value = currentSize.value.toFixed(2);
    if ((step > 0 && currentSize.value >= target) || (step < 0 && currentSize.value <= target)) {
  currentSize.value = target;
  animatedTotalSize.value = currentSize.value.toFixed(2);
  clearInterval(interval);
}
} catch (error: any) {
errorMessage.value = ’Erreur lors de la récupération des données. Veuillez réessayer plus tard. ’ + error.message;
} finally {
hideWaitAnimation();
}
};

const applyDateFilter = () => {
const table = $(’#table’);
table.bootstrapTable(‘load’, items.value);
table.bootstrapTable(
‘filterBy’,
{},
{
filterAlgorithm: function (row: { date: string | number | Date }, filters: any) {
const day = row.date.toString().slice(0, 2);
const month = row.date.toString().slice(3, 5) + ‘/’;
const year = row.date.toString().slice(6, 10);
const itemDate = new Date(year + ‘/’ + month + ‘/’ + day);
const fromDate = dateFrom.value ? new Date(dateFrom.value) : undefined;
const toDate = dateTo.value ? new Date(dateTo.value) : undefined;
    if (fromDate && toDate) {
      return itemDate >= fromDate && itemDate <= toDate;
    } else if (!fromDate && toDate) {
      return itemDate <= toDate;
    } else if (fromDate && !toDate) {
      return itemDate >= fromDate;
    }

    return true;
  },
}
);
};

const updateSelectedItems = () => {
const selectedRows: any = $(’#table’).bootstrapTable(‘getSelections’);
selectedItems.value = selectedRows.map((row: any) => ({
…row,
size: parseFloat(row.size),
}));
};

const generateFile = async () => {
waitAnimation();
try {
const selectedRows: any = $(’#table’).bootstrapTable(‘getSelections’);
if (selectedRows.length === 0) {
alert(‘Veuillez sélectionner au moins un fichier.’);
return;
}
const totalSize = selectedItems.value.reduce((total, item) => total + item.size, 0);
if (totalSize > 200) {
  errorMessage.value = 'Limite de 200 Mo dépassée. Veuillez réduire la sélection.';
  return;
}

const filenames = selectedRows.map((row: any) => ({
  name: row.nomfichier,
  pathFull: row.pathFull,
  zone: row.zone,
}));

const response = await fetch(`/api/file/tipi/download/${typeData.value}/download`, {
  method: 'POST',
  headers: {
    'Content-Type': 'application/json',
  },
  body: JSON.stringify({ filenames }),
});

if (!response.ok) {
  const errorData = await response.json();
  throw new Error(errorData.statusMessage || 'Erreur lors du téléchargement des fichiers.');
}

const blob = await response.blob();
const url = window.URL.createObjectURL(blob);
const a = document.createElement('a');
a.href = url;
a.download = `Fichiers_${typeData.value}_${zone.value}.zip`;
document.body.appendChild(a);
a.click();
a.remove();
$('#table').bootstrapTable('uncheckAll');
} catch (error: any) {
console.error(‘Erreur lors de la génération du fichier ZIP:’, error.message);
errorMessage.value = ’Erreur lors de la génération du fichier ZIP. ’ + error.message;
} finally {
hideWaitAnimation();
}
};

