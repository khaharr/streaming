<template>
    <nav :class="['navbar navbar-expand-lg', isDarkMode ? 'navbar-dark bg-dark' : 'navbar-light bg-light']">
        <div class="container-fluid">
            <NuxtLink :class="['navbar-brand', isActive('/')]" to="/">Accueil</NuxtLink>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarSupportedContent">
                <ul class="navbar-nav me-auto mb-2 mb-lg-0">
                    <li class="nav-item">
                        <NuxtLink :class="['nav-link', isActive('/dataset')]" to="/dataset">Jeu de données</NuxtLink>
                    </li>
                    <li class="nav-item dropdown">
                        <a class="nav-link dropdown-toggle" href="#" role="button" data-bs-toggle="dropdown">
                            Suivi de production
                        </a>
                        <ul class="dropdown-menu">
                            <li>
                                <NuxtLink :class="['dropdown-item', isActive('suiviexploit-env', 'tipi')]" :to="{ name: 'suiviexploit-env', params: { env: 'tipi' } }">
                                    Tipi
                                </NuxtLink>
                            </li>
                            <li>
                                <NuxtLink :class="['dropdown-item', isActive('suiviexploit-env', 'tipi-client')]" :to="{ name: 'suiviexploit-env', params: { env: 'tipi-client' } }">
                                    Tipi Client
                                </NuxtLink>
                            </li>
                            <li>
                                <NuxtLink :class="['dropdown-item', isActive('suiviexploit-env', 'payfip')]" :to="{ name: 'suiviexploit-env', params: { env: 'payfip' } }">
                                    Payfip
                                </NuxtLink>
                            </li>
                        </ul>
                    </li>
                    <li class="nav-item dropdown">
                        <a class="nav-link dropdown-toggle" href="#" role="button" data-bs-toggle="dropdown">
                            Paiement
                        </a>
                        <ul class="dropdown-menu">
                            <li>
                                <NuxtLink :class="['dropdown-item', isActive('paiement-env', 'tipi-client')]" :to="{ name: 'paiement-env', params: { env: 'tipi-client' } }">tipi-client</NuxtLink>
                            </li>
                            <li>
                                <NuxtLink :class="['dropdown-item', isActive('paiement-env', 'tipi')]" :to="{ name: 'paiement-env', params: { env: 'tipi' } }">tipi</NuxtLink>
                            </li>
                        </ul>
                    </li>
                    <li class="nav-item dropdown">
                        <a class="nav-link dropdown-toggle" href="#" role="button" data-bs-toggle="dropdown">
                            Les fichiers
                        </a>
                        <ul class="dropdown-menu">
                            <li>
                                <NuxtLink :class="['dropdown-item', isActive('/download')]" to="/download">Télécharger</NuxtLink>
                            </li>
                            <li>
                                <NuxtLink :class="['dropdown-item', isActive('/upload')]" to="/upload">Déposer</NuxtLink>
                            </li>
                        </ul>
                    </li>
                </ul>
                <li class="navbar-nav nav-item mx-3 ">
                    <i id="iconTheme" class="bi" :class="[isDarkMode ? 'bi-sun-fill' : 'bi-moon-fill']" @click="toggleDarkMode"></i>
                </li>
            </div>
        </div>
    </nav>
</template>

<script setup lang="ts">
import { useRoute } from 'vue-router';

const props = defineProps({
    isDarkMode: Boolean
});

const emits = defineEmits(['toggleDarkMode']);
const route = useRoute();

const toggleDarkMode = () => {
    emits('toggleDarkMode');
};

const isActive = (path: string, param?: string) => {
    if (param) {
        return route.name === path && route.params.env === param ? 'active' : '';
    }
    return route.path === path ? 'active' : '';
};
</script>

<style lang="scss" scoped>
nav {
    height: 60px;
}

.nav-item {
    cursor: pointer;
}

.nav-link.active {
    background-color: var(--color-gray-100) !important;
    color: var(--color-white) !important;
    border-radius: 15px;
}

.dropdown-item.active {
    background-color: var(--color-gray-100) !important;
    color: var(--color-white) !important;
    border-radius: 15px;
}
</style>

