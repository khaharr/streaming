<template>
  <div>
    <h1 class="my-3 d-flex justify-content-center ">Plan de production de {{ env.toUpperCase() }}</h1>
    <alert :classAlert="'alert-danger'" v-if="error">
      {{ error }}
    </alert>
    <div class="container row m-auto">
      <button @click="select(el.name)" class="col m-1 p-2 border border-dark text-center rounded-pill"
        :class="[objClass[el.name], el.color]" v-for="el in legende" :key="el.name">
        {{ el.name }}
      </button>
    </div>


    <div class="container-fluid p-5">
      <table id="table" data-toggle="table" data-pagination="true" data-search="true" data-sortable="true"
        data-page-size="100">
      </table>
    </div>
  </div>
</template>

<script setup lang="ts">
import { legende, columns } from '~/public/structureSuiviProd'
import { removeItem } from '~/services/utils'
const env = ref(useRoute().params.env as string || 'tipi')
const data = ref([])
const objClass: any = ref({})
const objName = ref<string[]>([])
const error = ref()

onMounted(() => {
  refresh()
 
})



const refresh = async () => {
  try {
    data.value = await $fetch(`/api/scheduler/${env.value}/jobs/suiviExploit`)
    resfreshData()
    // console.log(data.value)
  } catch (e) {
    console.log(e)
    data.value = []
    error.value = e
  } finally {

    resfreshData()
  }
}

const myFilter = () => {

  if (objName.value === undefined)
    return data.value

  const elStatus: string[] = []
  legende.filter((elt: { name: string, [key: string]: string }) => objName.value.includes(elt.name)).forEach(elt => {
    elStatus.push(elt.status)
  })

  if (elStatus.length <= 0)
    return data.value

  return data.value.filter((elt: any) => elStatus.includes(elt.status))
}
const resfreshData = () => {
  const data = myFilter();

  $('#table').bootstrapTable("destroy")
  $('#table').bootstrapTable({
    columns: columns,
    data: data
  })
}

const select = (name: string) => {
  let flag = false
  if (objClass.value[name]?.border === true) {
    objName.value = removeItem(objName.value, name) as string[]
  } else {
    flag = true
    objName.value.push(name)
  }
  objClass.value[name] = {
    border: flag,
    "border-3": flag
  }
  resfreshData()

}


</script>


<style scoped></style>
