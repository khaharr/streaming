Cas d’utilisation : Modification de la langue dans le profil utilisateur

Description générale

Ce cas d’utilisation permet à un utilisateur connecté de modifier la langue d’affichage de l’interface utilisateur de l’application. Ce changement est persistant et se reflète immédiatement après la mise à jour. La langue choisie est stockée dans la base de données et peut être utilisée pour personnaliser l’expérience utilisateur.

Cas d’utilisation complet et complexe

Acteurs

	•	Utilisateur : Personne connectée à son compte souhaitant modifier la langue de l’application.
	•	Système : L’application gérant la modification des paramètres utilisateur, incluant la langue.

Préconditions

	•	L’utilisateur doit être connecté à son compte.
	•	Le système doit supporter plusieurs langues (par exemple : Anglais, Français, Espagnol).
	•	La liste des langues disponibles doit être accessible dans l’application.

Postconditions

	•	La langue d’affichage de l’application est mise à jour immédiatement.
	•	La préférence linguistique de l’utilisateur est enregistrée dans la base de données pour être persistante.

Scénario principal (Front-end et Back-end)

	1.	Accès à la section de modification du profil :
	•	L’utilisateur accède à son profil et clique sur “Modifier le profil”.
	•	Route front-end : GET /profile/edit pour afficher le formulaire de modification.
	2.	Affichage des options de langue :
	•	Le formulaire affiche une liste déroulante (ou un menu) des langues disponibles (ex. Anglais, Français).
	•	L’utilisateur sélectionne une nouvelle langue, par exemple Anglais.
	3.	Soumission de la modification :
	•	L’utilisateur clique sur “Enregistrer” pour valider le changement.
	•	Le front-end envoie une requête au back-end pour mettre à jour la langue.
	•	Route API : PUT /api/profile/language avec { language: "en" }.
	4.	Validation côté serveur :
	•	Le back-end :
	•	Vérifie que la langue demandée est valide (parmi les langues supportées).
	•	Met à jour le champ language de l’utilisateur dans la base de données.
	•	Route API : PUT /api/profile/language renvoie une réponse de succès : { success: true, language: "en" }.
	5.	Mise à jour locale immédiate (Front-end) :
	•	Une fois le succès confirmé, le front-end met à jour l’affichage dans la langue choisie sans nécessiter de rechargement complet.
	•	Exemple : Charger les fichiers de traduction pour la langue sélectionnée (ex. JSON, i18n).
	6.	Confirmation à l’utilisateur :
	•	Le système affiche un message : “Votre langue a été mise à jour avec succès.”
	•	La modification est immédiatement visible.

Scénarios alternatifs (Erreurs)

	1.	Langue non valide :
	•	Si la langue sélectionnée n’est pas supportée (ex. une valeur non prévue dans la liste des langues disponibles) :
	•	Le serveur renvoie une erreur : { success: false, error: "Invalid language" }.
	•	Le front-end affiche un message : “Langue sélectionnée non valide, veuillez réessayer.”
	2.	Problème de connexion ou serveur :
	•	Si le serveur rencontre une erreur lors de la mise à jour (ex. base de données indisponible) :
	•	Réponse API : { success: false, error: "Unable to update language. Please try again later." }.
	•	Le front-end affiche un message : “Une erreur est survenue. Veuillez réessayer.”
	3.	Échec du chargement des traductions :
	•	Si les fichiers de traduction pour la langue choisie ne peuvent pas être chargés :
	•	Le front-end bascule sur une langue par défaut (par exemple : Anglais).
	•	Message affiché : “Impossible de charger la langue sélectionnée. La langue par défaut a été appliquée.”

Routes API détaillées

1. Récupérer les informations de profil, y compris la langue actuelle

	•	Route : GET /api/profile
	•	Description : Permet de charger les données actuelles du profil, incluant la langue.
	•	Sortie (Succès) :

{
  "success": true,
  "user": {
    "id": 123,
    "name": "John Doe",
    "language": "fr"
  }
}



2. Modifier la langue

	•	Route : PUT /api/profile/language
	•	Description : Permet de mettre à jour la langue préférée de l’utilisateur.
	•	Entrée :

{
  "language": "en"
}


	•	Sortie (Succès) :

{
  "success": true,
  "language": "en"
}


	•	Sortie (Erreur) :

{
  "success": false,
  "error": "Invalid language"
}

Front-end : Étapes de gestion de la langue

	1.	Affichage du formulaire
	•	Récupérer la langue actuelle via l’API GET /api/profile.
	•	Pré-remplir la liste déroulante avec la langue actuelle.
	2.	Soumission des modifications
	•	Envoyer une requête PUT /api/profile/language lorsque l’utilisateur valide.
	•	Gérer la réponse :
	•	Succès : Recharger les traductions pour la nouvelle langue.
	•	Erreur : Afficher un message d’erreur approprié.
	3.	Charger les traductions (i18n)
	•	Exemple avec une bibliothèque comme i18next :

i18next.changeLanguage('en').then(() => {
  console.log('Langue mise à jour');
});

Sécurité et meilleures pratiques

	1.	Validation des données :
	•	Vérifier que la langue envoyée par le client correspond aux langues supportées par le système (ex. via un tableau [ "en", "fr", "es" ]).
	2.	Persistance :
	•	Stocker la langue dans la base de données pour que l’utilisateur retrouve ses préférences à chaque connexion.
	3.	Performances :
	•	Pré-charger les fichiers de traduction pour les langues les plus utilisées afin d’améliorer la vitesse.
	4.	Messages génériques :
	•	En cas d’erreur, éviter de révéler trop de détails techniques et afficher des messages clairs à l’utilisateur.

Avec cette architecture front et back, le changement de langue est rapide, sécurisé, et persistant. Besoin d’un diagramme UML pour visualiser ?