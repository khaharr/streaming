const loadData = async () => {
  waitAnimation()
  try {
    const data: any[] = await $fetch(`/api/file/tipi/download/${typeData.value}/${zone.value}/listfile`);
    if (data.length > 0) {
      items.value = data.map((el) => ({
        ...el,
        date: new Intl.DateTimeFormat('fr-FR', {
          year: 'numeric',
          month: 'numeric',
          day: 'numeric',
          hour: 'numeric',
          minute: 'numeric',
          second: 'numeric',
          timeZone: 'GMT',
        }).format(el.date),
        size: (parseInt(el.size, 10) / (1024 * 1024)).toFixed(2) + ' Mo'
      }));

      $('#table').bootstrapTable('destroy');
      $('#table').bootstrapTable({ columns: columns, data: items.value });
    }
  } catch (error: any) {
    errorMessage.value = 'Erreur lors de la récupération des données. Veuillez réessayer plus tard. ' + error.message;
  } finally {
    hideWaitAnimation()
  }
}

ajout fonction calcul total fichier 
const calculateTotalSize = (selectedRows: any[]) => {
  return selectedRows.reduce((total, row) => {
    return total + parseFloat(row.size);
  }, 0);
};

generate file 

const generateFile = async () => {
  waitAnimation()
  try {
    const selectedRows: any = $('#table').bootstrapTable('getSelections');
    if (selectedRows.length === 0) {
      alert('Veuillez sélectionner au moins un fichier.');
      return;
    }

    const totalSize = calculateTotalSize(selectedRows);
    if (totalSize > 200) {
      errorMessage.value = 'Limite de 200 Mo dépassée. Veuillez réduire la sélection.';
      return;
    }

    console.log(selectedRows)
    const filenames = selectedRows.map((row: any) => {
      return { name: row.nomfichier, pathFull: row.pathFull, zone: row.zone }
    });

    const response = await fetch(`/api/file/tipi/download/${typeData.value}/download`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ filenames }),
    });

    if (!response.ok) {
      const errorData = await response.json();
      throw new Error(errorData.statusMessage || 'Erreur lors du téléchargement des fichiers.');
    }

    const blob = await response.blob();
    const url = window.URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `Fichiers_${typeData.value}_${zone.value}.zip`;
    document.body.appendChild(a);
    a.click();
    a.remove();
    $('#table').bootstrapTable('uncheckAll');
  } catch (error: any) {
    console.error('Erreur lors de la génération du fichier ZIP:', error.message);
    errorMessage.value = 'Erreur lors de la génération du fichier ZIP. ' + error.message;
  } finally {
    hideWaitAnimation()
  }
};

mtj compter 
const updateSizeCounter = () => {
  const selectedRows: any = $('#table').bootstrapTable('getSelections');
  const totalSize = calculateTotalSize(selectedRows);
  document.getElementById('size-counter').innerText = `Total sélectionné : ${totalSize.toFixed(2)} Mo`;
};

// Appelez cette fonction à chaque changement de sélection dans le tableau
$('#table').on('check.bs.table uncheck.bs.table check-all.bs.table uncheck-all.bs.table', updateSizeCounter);


<div v-if="isSelectionConfirmed" class="w-75 m-auto my-3">
  <div id="size-counter" class="mb-2">Total sélectionné : 0 Mo</div>
  <table
    id="table"
    data-filter-control-container="#filter"
    data-toggle="table"
    data-pagination="true"
    data-search="true"
    data-filter-control="true"
    data-maintain-meta-data="true"
    data-click-to-select="true"
    data-search-highlight="true"
    data-search-selector="#customSearch"
  ></table>
  
  <div class="text-center mb-4 d-flex justify-content-center">
    <button class="btn mtj validerCouleur" @click="generateFile" type="button" data-dismiss="alert">
      Générer Fichiers
    </button>
  </div>
  <div v-if="errorMessage" class="alert alert-danger" role="alert">
    {{ errorMessage }}
  </div>
</div>

